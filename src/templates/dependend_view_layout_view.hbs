<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>TBD</title>

  <!-- TODO: make css deps more dynamic, maybe allow tag reference here -->
  {{#each cssDeps}}
    <link rel="stylesheet" href="{{ rellink this }}">
  {{/each}}

  {{#if head}}
    <!-- SYLEGEN: dependencies.templates.head -->
    {{{ head }}}
    <!-- SYLEGEN: dependencies.templates.head (end) -->
  {{else}}
    <!-- SYLEGEN: dependencies.templates.head NO DEPS -->
  {{/if}}

  <!-- STYLEGEN: themes -->
  {{#each themes}}
    {{#if this.default}}<link rel="stylesheet" href="{{#if ../assetHost}}{{../assetHost}}/{{this.src}}{{else}}{{rellink this.src}}{{/if}}">{{/if}}
  {{/each}}
  <!-- STYLEGEN: themes (end) -->

  <!-- TODO: allow head js tags -->
</head>
{{! We have a display type of table-cell here, because we want to see element margins on ending child elements }}
<body>

  {{{content}}}

  {{#each jsDeps}}
    <script src="{{ rellink this }}"></script>
  {{/each}}

  {{#if bottom}}
    <!-- SYLEGEN: dependencies.templates.bottom -->
    {{{ bottom }}}
    <!-- SYLEGEN: dependencies.templates.bottom (end) -->
  {{else}}
    <!-- SYLEGEN: dependencies.templates.bottom NO DEPS -->
  {{/if}}

  <script type="text/javascript">
  (function(){
    "use strict";

    var elements, i, element, isVisible;
    // element.getBoundingClientRect().top
    // visible => element.ownerDocument

    var checks = {
      isIgnoredTag: function(element) {
        var ignoredTags = {
          "SCRIPT": true,
          "LINK": true,
          "META": true
        };

        return ignoredTags[element.tagName];
      },

      isHidden: function(element) {
        return element.offsetWidth <= 0 && element.offsetHeight <= 0 && !element.getClientRects().length;
      },

      isVisible: function(element) {
        return !checks.isHidden(element);
      }
    };

    var pxAsDecimal = function(value) {
      var stripped;
      if (Boolean(value) && /.*?px/.test(value)) {
        stripped = value.slice(0, value.indexOf("px"));
        return parseFloat(stripped);
      }

      return 0;
    };

    var checkFrameHeight = function() {
      var elements = document.body.getElementsByTagName('*')
        , frameHeight = 0
        , i, element, isVisible, dimensions, computedStyle
        , bottomMargin, shadow, shadowHeight = 0, shadowBlur = 0
        , rgbaMatch, colorMatch, insetMatch, bodyStyle, headStyle, bodyBottomPadding = 0, htmlHeight = 0;

      try {
        headStyle = document.documentElement.currentStyle || window.getComputedStyle(document.documentElement);
        htmlHeight = headStyle.getPropertyValue("height")
        htmlHeight = htmlHeight ? parseInt(htmlHeight.substr(0, htmlHeight.indexOf('px'))) : 0
        bodyStyle = document.body.currentStyle || window.getComputedStyle(document.body);
        bodyBottomPadding = bodyStyle.paddingBottom ? parseInt(bodyStyle.paddingBottom.substr(0, bodyStyle.paddingBottom.indexOf('px'))) : 0


        for (i = elements.length; i--;) {
          element = elements[i];
          isVisible = checks.isVisible(element);

          switch(true) {
            case (isVisible && checks.isIgnoredTag(element)):
              break;
            default:
              dimensions = element.getBoundingClientRect();
              computedStyle = element.currentStyle || window.getComputedStyle(element);
              bottomMargin = pxAsDecimal(computedStyle.marginBottom);

              shadow = computedStyle.boxShadow;

              // TODO: check for browser compatibility
              if (shadow !== 'none') {
                rgbaMatch = shadow.match(/^rgb[a]?\(.+?\)(.*?)$/)

                shadow = rgbaMatch && rgbaMatch[1] ? rgbaMatch[1] : shadow;

                insetMatch = shadow.match(/^(.*?) inset$/)
                shadow = insetMatch && insetMatch[1] ? insetMatch[1] : shadow;

                shadow = shadow.split(' ');
                shadowHeight = !!shadow[1] ? parseInt(shadow[1].substr(0, shadow[1].indexOf('px'))) : 0;
                shadowBlur = !!shadow[3] ? parseInt(shadow[3].substr(0, shadow[3].indexOf('px'))) : 0;
              }

              frameHeight = Math.max(frameHeight, dimensions.top + dimensions.height + bottomMargin + shadowHeight + shadowBlur + bodyBottomPadding);
              frameHeight = Math.max(frameHeight, htmlHeight);
          }
        }

      } catch(e) {
      // maybe not visible at the moment
      }

      document.body.setAttribute('data-frame-height', frameHeight);

      setTimeout(checkFrameHeight, 200);
    };

    checkFrameHeight();
  }());

  </script>
</body>
</html>
